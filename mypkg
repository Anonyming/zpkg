#!/usr/bin/env python3

"""
Install and use packages from other distributions

Supported distros
-A alpine
-C centos
-D debian
-F fedora
-G gentoo
-R archlinux
-U ubuntu



"""

import argparse
import subprocess
import tempfile
import os
import sys
import shutil

BCHROOT_FILE = os.path.expanduser("~/mypkg/bchroot")
DATADIR = os.path.expanduser("~/.mypkg")

LIST_ALL_CMD = ['sh', '-c',
"echo -n $PATH | xargs -d : -I {} find {} -maxdepth 1 -executable -type f -printf '%P\n' 2>/dev/null| sort -u"]

def die(msg):
    print("mypkg: " + msg, file=sys.stderr)
    sys.exit(1)

def very_magic_guess(newcmds, buildargs):
    if not newcmds:
        die("no new command found")
    if len(newcmds) == 1:
        return list(newcmds)[0]
    for token in buildargs:
        if token in newcmds:
            return token
    for cmd in sorted(newcmds, key=len):
        for token in builargs:
            if token in buildargs:
                return cmd
    die("could not guess program name with pure magic")

def add(args):
    if not args.plashbuild:
        parser_add.error("Missing build arguments")

    tmpdir = tempfile.mkdtemp()
    launcher = os.path.join(os.path.expanduser("~/bin/"), args.binary)
    datadir = os.path.join(DATADIR, args.binary)
    os.makedirs(DATADIR, exist_ok=True)
    os.makedirs(os.path.expanduser("~/bin/"), exist_ok=True)
    os.makedirs(os.path.join(tmpdir, "rootfs"))

    if args.binary != '-' and os.path.exists(datadir):
        die("{} already installed".format(args.binary))

    builded = subprocess.check_output(["plash", "build", "-x", "./boostrap.sh", "--layer"] + args.plashbuild).decode().strip("\n")
    subprocess.check_call(["plash", "shallow-copy", builded, os.path.join(tmpdir, "rootfs")])
    parent = subprocess.check_output(["plash", "parent", builded]).decode().strip("\n")
    orig_cmds = set(subprocess.check_output(["plash", 'run', parent] + LIST_ALL_CMD).splitlines())
    after_cmds = set(subprocess.check_output(["plash", 'run', builded] + LIST_ALL_CMD).splitlines())
    subprocess.check_call(["plash", "rm", builded])

    if args.binary == '-':
        args.binary = very_magic_guess(after_cmds - orig_cmds, args.plash)
        if args.binary != '-' and os.path.exists(datadir):
            die("{} already installed".format(args.binary))

    os.link(BCHROOT_FILE, os.path.join(tmpdir, args.binary))
    # XXXX check program exists in chroot!
    os.rename(tmpdir, datadir)
    try:
        os.unlink(launcher)
    except FileNotFoundError:
        pass
    os.symlink(os.path.join(datadir, args.binary), launcher)
    print()
    print("installed data     to: {}".format(datadir))
    print("installed launcher to: {}".format(launcher))


def remove(args):
    for p in args.packages:
        if not os.path.exists(os.path.join(DATADIR, p)):
            die("{} is not installed".format(p))
        shutil.rmtree(os.path.join(DATADIR, p))
        print("removed: {}".format(p), file=sys.stderr)


def list(args):
    for f in os.listdir(DATADIR):
        print(f)

# create the top-level parser
parser = argparse.ArgumentParser(description="Install and use packages from other distributions")
subparsers = parser.add_subparsers()

parser_add = subparsers.add_parser(
    'add', help='add a package')
parser_add.add_argument('binary', help="program launcher name")
parser_add.add_argument('plashbuild', nargs=argparse.REMAINDER, help="build commands (--help-build-commands)")
parser_add.set_defaults(func=add)

parser_list = subparsers.add_parser(
    'ls', help='list installed packages')
parser_list.set_defaults(func=list)

parser_remove = subparsers.add_parser(
    'rm', help='remove packages')
parser_remove.add_argument("packages", nargs='+')
parser_remove.set_defaults(func=remove)

args = parser.parse_args()
args.func(args)
