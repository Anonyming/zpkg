#!/usr/bin/env python3
"""usage: zpkg [-g] {add,package,ls,punch,rm} ...

Subcommands:
    add [PKG] BUILD-ARGS   builds and adds a package
    package PKG FILE       creates an installabe package
    ls                     lists all installed packages
    punch                  shrinks build cache and cleanup
    rm PKG                 uninstalls the given package

Global Arguments:
    --global, -g
        Affects the system globally

Build Arguments:
    --from, -f
        choose a base image
    --from-url
        use a tar file over http as base image
    --run, -x
        run any shell (/bin/sh) command
    --layer, -l
        adds layer for build chaing
    --from-github
        build according to instruction at github project
    --apt, --apk, --apt, --defpm, --dnf, --emerge, --npm, --pacman, --pip,
    --pip3, --yum
        Invokes the given tool with it's primary action
    -A same as `--from alpine --apk`
    -C same as `--from centos --yum`
    -D same as `--from debian --apt`
    -F same as `--from fedora --dnf`
    -G same as `--from gentoo --emerge`
    -R same as `--from archlinux --pacman`
    -U same as `--from ubuntu --apt`

Example:
    $ zpkg add xeyes -U x11-apps
    $ zpkg add gimp -A gimp
    $ zpkg ls
    gimp
    xeyes
    $ zpkg rm xeyes"""

import sys, os, subprocess, shutil, tempfile, shlex
from os.path import join

dir_path = os.path.dirname(os.path.realpath(__file__))
BCHROOT_FILE = join(dir_path, 'bchroot')
BOOTSTRAP_SCRIPT = join(dir_path, 'bootstrap.sh')

os.environ["PATH"] = ":".join([join(dir_path, "plash/bin")] + os.environ.get("PATH").split(":"))

if len(sys.argv) > 1 and sys.argv[1] in ('-g', '--global'):
    sys.argv.pop(1)
    DATADIR = "/usr/local/lib/zpkg"
    BINDIR = "/usr/local/bin"
    PLASH_DATA = "/var/cache/zpkg"
else:
    DATADIR = os.path.expanduser("~/.local/lib/zpkg")
    BINDIR = os.path.expanduser("~/.local/bin")
    PLASH_DATA = os.path.expanduser("~/.cache/zpkg")
os.environ["PLASH_DATA"] =  PLASH_DATA

LIST_ALL_CMD = [
    'sh', '-c',
    "echo -n $PATH | tr : '\n' | xargs -I {} find {} -maxdepth 1 -perm /u=x,g=x,o=x \( -type f -or -type l \) 2> /dev/null | sort -u"
]


def usage():
    print(__doc__)
    sys.exit(1)


def die(msg):
    print("zpkg error: {}".format(msg), file=sys.stderr)
    sys.exit(1)


def info(msg):
    print("zpkg: {}".format(msg), file=sys.stderr)


def plash_call(*args):
    try:
        return subprocess.check_output(["plash"] +
                                       list(args)).decode().strip("\n")
    except subprocess.CalledProcessError as exc:
        sys.exit(1)


def very_magic_guess(newcmds, buildargs):
    if not newcmds:
        die("no new command found in PATH after build")
    if len(newcmds) == 1:
        return list(newcmds)[0]
    for token in buildargs:
        if token in newcmds:
            return token
    for cmd in sorted(newcmds, key=len):
        for token in buildargs:
            if token in cmd:
                return cmd
    die("unguessable command, call again specifying one of: {}".format(' '.join(newcmds)))


def assert_is_installed(pkg):
    if not os.path.exists(join(DATADIR, pkg)):
        die("package {} is not installed".format(str(pkg)))


if not len(sys.argv) >= 2:
    usage()
elif sys.argv[1] in ["-h", "--help"]:
    usage()
elif not sys.argv[1] in ["add", "ls", "rm", "punch", "package"]:
    die("no such subcommand, try --help")

os.makedirs(DATADIR, exist_ok=True)
os.makedirs(BINDIR, exist_ok=True)

if sys.argv[1] not in ("package", "ls"):
    plash_call("init")

#####
# zpkg ls
#####
if sys.argv[1] == "ls":
    for pkg in os.listdir(DATADIR):
        print(pkg)
        #release_file = join(DATADIR, pkg, "rootfs/etc/os-release")
        #osname = subprocess.check_output(["sh", "-c", '. "$1"; echo $PRETTY_NAME', "--", release_file]).decode().strip("\n")
        #print("{: <12} {}".format(pkg, osname))

#####
# zpkg rm
#####
elif sys.argv[1] == "rm":
    if len(sys.argv) < 3:
        die("rm PKG")

    assert_is_installed(sys.argv[2])
    try:
        shutil.rmtree(os.path.join(DATADIR, sys.argv[2]))
    except OSError as exc:
        die("rm {}: {}".format(sys.argv[2], exc))
    try:
        os.unlink(join(BINDIR, sys.argv[2]))
    except FileNotFoundError:
        pass
    cont = plash_call("map", sys.argv[2])
    if cont:
        plash_call("rm", cont)
        plash_call("clean")
    info("removed: {}".format(sys.argv[2]))

#####
# zpkg punch
#####
elif sys.argv[1] == "punch":
    plash_call("shrink")
    plash_call("clean")

#####
# zpkg package
#####
elif sys.argv[1] == "package":
    if len(sys.argv) < 4:
        die("usage: zpkg [-g] package PROGRAM OUTFILE")
    assert_is_installed(sys.argv[2])
    plash_call(
        "sudo",
        "tar",
        "-C",
        os.path.dirname(BINDIR),
        "-cf", sys.argv[3],
        join("bin", sys.argv[2]),
        join("lib/zpkg", sys.argv[2])
    )
    print((
    "Install package locally:\n"
    "$ tar -xf {0} -C ~/.local \n"
    "\n"
    "Install package globally:\n"
    "$ tar -xf {0} -C /usr/local"
    ).format(shlex.quote(sys.argv[3])))

#####
# zpkg add
#####
elif sys.argv[1] == "add":
    if len(sys.argv) <= 2:
        die("usage: zpkg [-g] add [PKG] BUILD-ARGS")

    if sys.argv[2].startswith("-"):
        sys.argv.insert(2, "?")

    if not sys.argv[3:]:
        die("zpkg add: build arguments missing")

    if not sys.argv[3].startswith("-"):
        die("zpkg add: build argument cannot be positional argument")

    if sys.argv[2] != '?' and os.path.exists(join(DATADIR, sys.argv[2])):
        die("package {} is already installed".format(repr(sys.argv[2])))

    tmpdir = tempfile.mkdtemp(dir=join(PLASH_DATA, "tmp")) # reuse plash's tmp
    builded = plash_call("build", "--hash-path", BOOTSTRAP_SCRIPT, "-x",
                         BOOTSTRAP_SCRIPT, "--layer", *sys.argv[2:])
    plash_call("shallow-copy", builded, join(tmpdir, "rootfs"))
    os.chmod(join(tmpdir, "rootfs"), 0o755)
    parent = plash_call("parent", builded)
    orig_cmds = set(plash_call('run', parent, *LIST_ALL_CMD).splitlines())
    after_cmds = set(plash_call('run', builded, *LIST_ALL_CMD).splitlines())
    new_cmds = sorted([os.path.basename(i) for i in (after_cmds - orig_cmds)])

    if not new_cmds:
        die("no new binaries found")
    if sys.argv[2] == "?":
        sys.argv[2] = very_magic_guess(new_cmds, sys.argv[3:])
        info("guessed your program with pure magic: {}".format(sys.argv[2]))
    elif sys.argv[2] not in new_cmds:
        die("program {} not found, but found: {}".format(
            sys.argv[2], new_cmds))
    if os.path.exists(join(DATADIR, sys.argv[2])):
        die("{} already installed".format(sys.argv[2]))

    targetdir = join(DATADIR, sys.argv[2])
    launcher = join(BINDIR, sys.argv[2])
    os.link(BCHROOT_FILE, join(tmpdir, sys.argv[2]))
    os.rename(tmpdir, targetdir)
    os.chmod(targetdir, 0o755)
    try:
        os.unlink(launcher)
    except FileNotFoundError:
        pass
    os.symlink(join("../lib/zpkg", sys.argv[2], sys.argv[2]), launcher)
    print()
    print("installed data     to: {}".format(targetdir))
    print("installed launcher to: {}".format(launcher))

    # map it, so it can be deleted
    plash_call("map", sys.argv[2], builded)
