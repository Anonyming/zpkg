#!/usr/bin/env python3
"""USAGE
    zpkg [-g|-l|-o|-r] {add,flush,freeze,ls,package,rebuild,rm,upgrade} ...

SUBCOMMANDS
    add [PKG] BUILD-ARGS   builds and adds a package
    flush                  flushes the build cache
    freeze                 print package with build instruction
    ls                     lists all installed packages
    package PKG FILE       creates a standalone package
    rebuild PKG            rebuild given package
    rm PKG                 uninstalls the given package
    unfreeze FREEZED-FILE  apply frozen file
    upgrade                upgrades each package atomically

ARGUMENTS
    --global, -g
        affects the system globally
    --local, -l
        saves packages in cwd under ./zpkg
    --opt, -o
        installs programs in /opt directory (default)
    --root, -r
        installs programs in system RootFS. CAN CORRUPT YOUR SYSTEM, USE IT FOR YOUR OWN RISK!!!

BUILD ARGUMENTS
    --from, -f
        choose a base image
    --run, -x
        run any shell (/bin/sh) command
    --layer, -l
        adds a layer for build caching
    --from-github
        build according to instructions at GitHub project
    --add-apt-repository, --apt, --apk, --apt, --dnf, --emerge, --npm,
    --pacman, --pip, --pip3, --yum
        Invokes the given tool with it's primary action
    -A same as `--from alpine:edge --apk`
    -C same as `--from centos:8 --yum`
    -D same as `--from debian:sid --apt`
    -F same as `--from fedora:32 --dnf`
    -G same as `--from gentoo:current --emerge`
    -R same as `--from archlinux:current --pacman`
    -U same as `--from ubuntu:focal --apt`

EXAMPLE
    zpkg add xeyes -U x11-apps
    zpkg add -A gimp
    zpkg add -A py3-pip --pip3 yapf
    zpkg rm yapf"""

import os
import shlex
import shutil
import subprocess
import sys
import tempfile
from os.path import join, expanduser

dir_path = os.path.dirname(os.path.realpath(__file__))
RUNNER_FILE = join(dir_path, 'run')
BOOTSTRAP_SCRIPT = open(join(dir_path, 'bootstrap.sh')).read()

os.environ["PATH"] = ":".join([join(dir_path, "plash/bin")] +
                              os.environ.get("PATH").split(":"))

if len(sys.argv) > 1:
    match sys.argv[1]:
        case '-g' | '--global':
            sys.argv.pop(1)
            zpkg_install_dir = "/usr/local/"
            zpkg_cache_dir = "/var/cache/zpkg"
        case '-l' | '--local':
            sys.argv.pop(1)
            zpkg_install_dir = ".local"
            zpkg_cache_dir = "~/.cache/zpkg"
        case '-o' | '--opt':
            if os.access('/opt', os.W_OK):
                sys.argv.pop(1)
                zpkg_install_dir = "/opt"
                zpkg_cache_dir = "/var/cache/zpkg"
            else:
                sys.stderr.write(f"zpkg incorrect command: try to install to /opt without permission to write here")
                raise '''Need superuser access to write in /opt.
                Try to run 'sudo zpkg ...' or login as root'''
        case '-r' | '--root':
            if os.access('/', os.W_OK):
                sys.argv.pop(1)
                zpkg_install_dir = "/"
                zpkg_cache_dir = "/var/cache/zpkg"
            else:
                sys.stderr.write(f"zpkg incorrect command: try to install to RootFS without permission to write here")
                raise '''Need superuser access to write in RootFS.
                Try to run 'sudo zpkg ...' or login as root'''
else:
    zpkg_install_dir = "/opt"
    zpkg_cache_dir = "/var/cache/zpkg"

    # try to overwrite with env vars
    try:
        zpkg_install_dir = os.environ["ZPKG_INSTALL_DIR"]
    except KeyError:
        pass
    try:
        zpkg_cache_dir = os.environ["ZPKG_CACHE_DIR"]
    except KeyError:
        pass

DATADIR = expanduser(join(zpkg_install_dir, "lib/zpkg"))
BINDIR = expanduser(join(zpkg_install_dir, "bin"))
PLASH_DATA = expanduser(zpkg_cache_dir)

os.environ["PLASH_DATA"] = PLASH_DATA

LIST_ALL_CMD = [
    'sh', '-c',
    "echo -n $PATH | tr : '\n' | xargs -I {} find {} -maxdepth 1 -perm /u=x,g=x,o=x \( -type f -or -type l \) 2> /dev/null | sort -u"
]


def usage():
    print(__doc__)
    sys.exit(1)


def die(msg):
    sys.stderr.write(f'zpkg error: {msg}')
    raise f'zpkg error: {msg}'

def info(msg):
    print("zpkg: {}".format(msg), file=sys.stderr)


def plash_call(*args):
    try:
        return subprocess.check_output(["plash"] +
                                       list(args)).decode().strip("\n")
    except subprocess.CalledProcessError as exc:
        sys.exit(1)


def very_magic_guess(newcmds, buildargs):
    if not newcmds:
        die("no new command found after build finished")
    if len(newcmds) == 1:
        return list(newcmds)[0]
    for token in buildargs:
        if token in newcmds:
            return token
    for cmd in sorted(newcmds, key=len):
        for token in buildargs:
            if token in cmd:
                return cmd
    for cmd in sorted(newcmds, key=len):
        for token in reversed(buildargs):
            if len(cmd) >= 4 and cmd in token:
                return cmd

    die("unguessable command, call again specifying one of: {}".format(
        ' '.join(newcmds)))


def swap_paths(dir1, dir2):
    import ctypes, errno, platform
    AT_FDCWD = -100
    if platform.architecture()[0] == '32bit':
        SYS_renameat2 = 353
    else:
        SYS_renameat2 = 316
    RENAME_EXCHANGE = (1 << 1)
    libc = ctypes.CDLL(None, use_errno=True)
    err = libc.syscall(SYS_renameat2, AT_FDCWD, ctypes.c_char_p(dir1),
                       AT_FDCWD, ctypes.c_char_p(dir2), RENAME_EXCHANGE)
    if err:
        errstr = errno.errorcode[ctypes.get_errno()]
        die("could not renameat2 with RENAME_EXCHANGE: {} -> {} ({})".format(
            dir1.decode(), dir2.decode(), errstr))


def assert_is_installed(pkg):
    if not os.path.exists(join(DATADIR, pkg)):
        die("package {} is not installed".format(repr(pkg)))


if not len(sys.argv) >= 2:
    usage()
elif sys.argv[1] in ["-h", "--help", "help"]:
    usage()
elif not sys.argv[1] in [
        "add", "ls", "freeze", "rebuild", "rm", "flush", "package", "upgrade", "unfreeze"
]:
    die("no such subcommand, try --help")

os.makedirs(DATADIR, exist_ok=True)
os.makedirs(BINDIR, exist_ok=True)

if sys.argv[1] not in ("package", "ls"):
    plash_call("init")

#####
# zpkg ls
#####
if sys.argv[1] == "ls":
    for pkg in os.listdir(DATADIR):
        print(pkg)

#####
# zpkg freeze
#####
elif sys.argv[1] == "freeze":
    for pkg in os.listdir(DATADIR):
        try:
            with open(join(DATADIR, pkg, 'buildargs')) as f:
                args = f.read()
        except FileNotFoundError:
            continue
        print('zpkg add {} {}'.format(pkg, args))

#####
# zpkg unfreeze
#####
elif sys.argv[1] == "unfreeze":
    try:
        freezed_file = sys.argv[2]
    except IndexError:
        die("usage: zpkg [-g|-l|o|-r] unfreeze FREEZED-FILE")
    try:
        with open(freezed_file, "r") as f:
            freezed = f.readlines()
    except OSError as exc:
        die(exc)

    tmpdir = tempfile.mkdtemp(dir=join(PLASH_DATA, "tmp"))
    os.environ["ZPKG_INSTALL_DIR"] = tmpdir
    for freeze_line in freezed:
        cmd = shlex.split(freeze_line[:-1])
        if not cmd[:2] == ["zpkg", "add"]:
            die('freeze file must start with: zpkg add ...')
        p = subprocess.Popen([sys.argv[0], 'add'] + cmd[2:])
        exitcode = p.wait()
        if exitcode:
            sys.exit(exitcode)

    src = tmpdir
    dst = expanduser(zpkg_install_dir)
    info("rename {} => {}".format(src, dst))
    swap_paths(src.encode(), dst.encode())

#####
# zpkg rebuild
#####
elif sys.argv[1] == "rebuild":

    try:
        pkg = sys.argv[2]
    except IndexError:
        die("usage: zpkg [-g|-l|-o|-r] rebuild PKG")

    if not os.path.exists(join(DATADIR, pkg)):
        die("package {} is not installed".format(repr(pkg)))

    try:
        with open(join(DATADIR, pkg, 'buildargs')) as f:
            build_args = shlex.split(f.read())
    except FileNotFoundError:
        info("skip {} (no build steps)".format(pkg))
    else:
        tmpdir = tempfile.mkdtemp(dir=join(PLASH_DATA,
                                           "tmp"))  # reuse plash's tmp
        cont = plash_call("map", pkg)
        if cont:
            plash_call("rm", cont)
            plash_call("clean")

        builded = plash_call("build", "--run", BOOTSTRAP_SCRIPT, "--layer",
                             "--run", "", "--layer", *build_args)
        plash_call("shallow-copy", builded, tmpdir)
        swap_paths(tmpdir.encode(), join(DATADIR, pkg, 'rootfs').encode())
        plash_call("map", pkg, builded)

#####
# zpkg rm
#####
elif sys.argv[1] == "rm":
    if len(sys.argv) < 3:
        die("rm PKG")
    assert_is_installed(sys.argv[2])
    cont = plash_call("map", sys.argv[2])
    if cont:
        plash_call("rm", cont)
        plash_call("clean")

    if sys.argv[2] == "zpkg":
        die("can't do; try: rm {} {} -rf".format(
                                      join(DATADIR, sys.argv[2]),
                                      join(BINDIR, sys.argv[2])))
        sys.exit(1)

    tmpdir = tempfile.mkdtemp(dir=join(PLASH_DATA, "tmp"))
    os.rename(join(DATADIR, sys.argv[2]), tmpdir)
    os.execlp("plash", "plash", "sudo", "rm", "-rf", tmpdir,
               join(BINDIR, sys.argv[2]))

#####
# zpkg flush
#####
elif sys.argv[1] == "flush":
    plash_call("purge", '--yes')

#####
# zpkg upgrade
#####
elif sys.argv[1] == "upgrade":
    plash_call("purge", '--yes')
    for pkg in os.listdir(DATADIR):
        p = subprocess.Popen([sys.argv[0], 'rebuild', pkg])
        info("build {}".format(pkg))
        exitcode = p.wait()
        if exitcode:
            sys.exit(exitcode)

#####
# zpkg package
#####
elif sys.argv[1] == "package":
    if len(sys.argv) < 4:
        die("usage: zpkg [-g|-l|-o|-r] package PROGRAM OUTFILE")
    assert_is_installed(sys.argv[2])
    plash_call("sudo", "tar", "-C", os.path.dirname(BINDIR), "-cJf",
               sys.argv[3], join("bin", sys.argv[2]),
               join("lib/zpkg", sys.argv[2]))
    print(("Install package locally:\n"
           "tar -xf {0} -C ~/.local \n"
           "\n"
           "Install package globally:\n"
           "tar -xf {0} -C /usr/local").format(shlex.quote(sys.argv[3])))

#####
# zpkg add
#####
elif sys.argv[1] == "add":
    if len(sys.argv) <= 2:
        die("usage: zpkg [-g|-l|-o|-r] add [PKG] BUILD-ARGS")

    if sys.argv[2].startswith("-"):
        sys.argv.insert(2, "?")

    if not sys.argv[3:]:
        die("zpkg add: build arguments missing")

    if not sys.argv[3].startswith("-"):
        die("zpkg add: build argument cannot be positional argument")

    if sys.argv[2] != '?' and os.path.exists(join(DATADIR, sys.argv[2])):
        die("package {} is already installed".format(repr(sys.argv[2])))

    tmpdir = tempfile.mkdtemp(dir=join(PLASH_DATA, "tmp"))  # reuse plash's tmp
    builded = plash_call("build", "--run", BOOTSTRAP_SCRIPT, "--layer",
                         "--run", "", "--layer", *sys.argv[2:])
    plash_call("shallow-copy", builded, join(tmpdir, "rootfs"))
    os.chmod(join(tmpdir, "rootfs"), 0o755)
    os.mkdir(join(tmpdir, "rootfs", "host"))
    nodepath = plash_call("nodepath", builded)
    base = nodepath.split("/layer/")[1].split("/")[1]
    orig_cmds = set(plash_call('run', base, *LIST_ALL_CMD).splitlines())
    after_cmds = set(plash_call('run', builded, *LIST_ALL_CMD).splitlines())
    new_cmds = sorted([os.path.basename(i) for i in (after_cmds - orig_cmds)])

    if not new_cmds:
        die("no new commands found")
    if sys.argv[2] == "?":
        sys.argv[2] = very_magic_guess(new_cmds, sys.argv[3:])
        info("guessed your command name: {}".format(sys.argv[2]))
    elif sys.argv[2] not in new_cmds:
        die("command {} not found after build finished, but there is: {}".
            format(repr(sys.argv[2]), ' '.join(new_cmds)))
    if os.path.exists(join(DATADIR, sys.argv[2])):
        die("package {} is already installed".format(repr(sys.argv[2])))

    with open(join(tmpdir, 'buildargs'), 'w') as f:
        f.write(' '.join(shlex.quote(i) for i in sys.argv[3:]))

    targetdir = join(DATADIR, sys.argv[2])
    launcher = join(BINDIR, sys.argv[2])
    os.mkdir(join(tmpdir, "bin"))
    shutil.copy2(RUNNER_FILE, join(tmpdir, "bin", sys.argv[2]))
    os.link(join(tmpdir, "bin", sys.argv[2]),
                join(tmpdir, "bin", 'sh'))
    os.link(join(tmpdir, "bin", sys.argv[2]),
                join(tmpdir, "bin", 'env'))
    os.rename(tmpdir, targetdir)
    os.chmod(targetdir, 0o755)
    try:
        os.unlink(launcher)
    except FileNotFoundError:
        pass
    os.symlink(join("../lib/zpkg", sys.argv[2], "bin", sys.argv[2]), launcher)

    home = expanduser('~')
    datadir = targetdir.replace(home, '~')
    launcher = launcher.replace(home, '~')
    info("installed {} to {}".format(
        sys.argv[2], launcher))
    #print("linked to: {}".format(launcher))

    # map it, so it can be deleted
    plash_call("map", sys.argv[2], builded)
